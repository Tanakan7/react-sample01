{"version":3,"sources":["logo.svg","component/Fuga.js","component/Hoge.js","component/Ref.js","component/TimerChild.js","component/TimerComponent.js","component/CountDown.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Fuga","props","_handleClick","bind","console","log","this","str","increment","Fragment","onClick","React","Component","Hoge","state","val","setState","Ref","myRef","createRef","current","ref","TimerChild","TimerComponent","timer1","Timer","timerValue","start","addEventListener","getTimeValues","toString","className","id","CountDown","milliSecond","_stopCountDown","precision","countdown","startValues","seconds","isRunning","pause","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7286ec7f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nclass Fuga extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this._handleClick = this._handleClick.bind(this);\n  }\n\n  _handleClick() {\n    console.log(this.props.str);\n    // 親のstateを変更する!\n    this.props.increment();\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <p>Fugaコンポーネント(ボタン押下でHogeのStateを変更する)</p>\n        <button onClick={this._handleClick}>Fugaボタン</button>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Fuga\n","import React from 'react';\nimport Fuga from \"./Fuga\";\n\nclass Hoge extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      val: 1,\n    }\n\n    this._handleClick = this._handleClick.bind(this);\n  }\n\n  _handleClick() {\n    this.setState({\n      val: this.state.val + 1,\n    })\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <p>Hogeコンポーネントのstate.val: {this.state.val}</p>\n        <button onClick={this._handleClick}>Hogeボタン</button>\n        {/* 値のときはダブルクオート、関数は{}で()なし */}\n        <Fuga\n          increment={this._handleClick}\n          str=\"aaa\"\n        />\n      </React.Fragment>\n    )\n  }\n}\n\nexport default Hoge\n","import React from 'react';\n\nclass Ref extends React.Component {\n  constructor(props) {\n    super(props);\n    this.myRef = React.createRef();\n\n    this._handleClick = this._handleClick.bind(this);\n  }\n\n  _handleClick() {\n    console.log('クリックされたコンポーネントのDOM→', this.myRef.current);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <p ref={this.myRef}>Refコンポーネント: {this.props.val}</p>\n        <button onClick={this._handleClick}>Refボタン</button>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Ref\n","import React from 'react';\n\nclass TimerChild extends React.Component {\n  render() {\n    return (\n      <div>\n        <p>{this.props.val}</p>\n      </div>\n    )\n  }\n}\n\nexport default TimerChild\n","import React from 'react';\nimport { Timer } from 'easytimer.js';\n\nimport TimerChild from \"./TimerChild\";\n\nclass TimerComponent extends React.Component {\n  constructor(props) {\n    super(props)\n    this.timer1 = new Timer();\n\n    this.state = {\n      timerValue: '',\n      str: 'サンプル',\n    }\n  }\n\n  componentDidMount() {\n    console.log('componentDidMount');\n    this.timer1.start();\n    this.timer1.addEventListener('secondsUpdated', () => {\n      this.setState({\n        timerValue: this.timer1.getTimeValues().toString()\n      })\n    })\n  }\n  render() {\n    return (\n      <div className='wrap'>\n        <p>Timerコンポーネント</p>\n        <p id='js-countup'>{this.state.timerValue}</p>\n        <p>TimerChildコンポーネント(親のもつtime(state)を受け継ぐ)</p>\n        <TimerChild val={this.state.timerValue} />\n      </div>\n    )\n  }\n}\n\nexport default TimerComponent\n","import React from 'react';\nimport { Timer } from 'easytimer.js';\n\nclass CountDown extends React.Component {\n  constructor(props) {\n    super(props)\n    this.timer1 = new Timer();\n\n    this.state = {\n      timerValue: '',\n      milliSecond: '',\n      str: 'サンプル',\n    }\n\n    this._stopCountDown = this._stopCountDown.bind(this)\n  }\n\n  componentDidMount() {\n    // カウントダウンタイマー開始\n    this.timer1.start({\n      precision: 'secondTenths',\n      countdown: true,\n      startValues: { seconds: 10 },\n    });\n    // 100msおきに実行される処理を設定\n    this.timer1.addEventListener('secondTenthsUpdated', () => {\n      this.setState({\n        timerValue: this.timer1\n          .getTimeValues()\n          .toString([\"minutes\", \"seconds\"]),\n        milliSecond: this.timer1\n          .getTimeValues()\n          .toString(['secondTenths']),\n      });\n    })\n\n    this.timer1.addEventListener('targetAchieved', () => {\n      console.log('タイマー終了')\n    })\n  }\n\n  _stopCountDown() {\n    if (this.timer1.isRunning()) {\n      this.timer1.pause();\n    } else {\n      this.timer1.start();\n    }\n  }\n\n  render() {\n    return (\n      <div className='wrap'>\n        <p>{this.state.timerValue}.{this.state.milliSecond}</p>\n        <button onClick={this._stopCountDown}>ポーズ・再開</button>\n      </div>\n    )\n  }\n}\n\nexport default CountDown\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport Hoge from \"./component/Hoge\";\nimport Ref from \"./component/Ref\";\nimport TimerComponent from \"./component/TimerComponent\";\nimport CountDown from \"./component/CountDown\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Hoge />\n        <Ref val=\"first\" />\n        <Ref val=\"second\" />\n        <TimerComponent />\n        <CountDown />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}